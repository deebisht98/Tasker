import React, { useState, useEffect } from "react";
import { useLocation } from "react-router-dom";
import Confetti from "react-confetti";
import { Todo } from "../../components/model/model";
import { MdDone } from "react-icons/md";
import { useDispatch } from "react-redux";
import { finishTodo } from "../../store/actions";
import { MdRestartAlt } from "react-icons/md";
import { useNavigate } from "react-router-dom";
import { toast, ToastContainer } from "react-toastify";
import { injectStyle } from "react-toastify/dist/inject-style";

// CALL IT ONCE IN YOUR APP
import "./Pomodoro.css";
let win = require("../../win.mp3");

if (typeof window !== "undefined") {
  injectStyle();
}
interface propState {
  data: Todo;
}

type activeType = {
  info: string;
  minutes: any;
  seconds: any;
};
// let uso =
//   "data:audio/mp3;base64,";

const Pomodoro: React.FC = () => {
  const location = useLocation();
  let navigate = useNavigate();
  const dispatch = useDispatch();
  let { data } = location.state as propState;
  const [show, setShow] = useState<boolean>(false);
  const [showRestart, setShowRestart] = useState<boolean>(false);
  const [startTimer, setStartTimer] = useState<boolean>(false);
  const [currType, setCurrType] = useState<activeType>({
    info: "pomo",
    minutes: "25",
    seconds: "00",
  });

  const resetTimer = () => {
    if (currType.info === "pomo") {
      setCurrType({ info: "pomo", minutes: "25", seconds: "00" });
    } else if (currType.info === "short")
      setCurrType({ info: "short", minutes: "05", seconds: "00" });
    else setCurrType({ info: "long", minutes: "15", seconds: "00" });
  };

  useEffect(() => {
    let timer: any;
    const startCounter = () => {
      let minute = currType.minutes;
      let sec = currType.seconds;
      timer = setInterval(function () {
        // let tickSound = new Audio(uso);
        // tickSound.volume = 1;
        // tickSound.play();

        sec--;
        if (sec === -1) {
          minute--;
          if (minute < 10) {
            minute = "0" + minute;
          }
          sec = 59;
        } else if (sec < 10) {
          sec = "0" + sec;
        }
        if (minute === "00" && sec === "00") {
          toast.dark("Please stop the timer to take the break.");
          clearInterval(timer);
          setStartTimer(!startTimer);
          setShowRestart(true);
          resetTimer();
          if (currType.info === "pomo") {
            setShow(true);
            let myAudio = new Audio(win);
            myAudio.play();
          }
        }
        setCurrType({ ...currType, minutes: minute, seconds: sec });
      }, 1000);
    };
    if (startTimer) {
      startCounter();
    }
    return () => {
      clearInterval(timer);
    };
  }, [startTimer]);

  const finishTask = () => {
    dispatch(finishTodo(data.id, data.todo));
    navigate("/Tasker");
  };

  return (
    <>
      <ToastContainer />
      <div className="todo_wrapper">
        <div className="todo_header_wrapper">
          <p className="todo_heading">{data.todo}</p>
          <div className="finish" onClick={finishTask}>
            <p>Finish Task</p>
            <MdDone />
          </div>
        </div>
        {show && (
          <div className="confetti">
            <Confetti
              recycle={true}
              numberOfPieces={200}
              width={window.innerWidth}
              height={window.innerHeight}
            />
          </div>
        )}
        <div className="timer">
          <div className="types">
            <button
              className={`type ${currType.info === "pomo" ? "curr" : ""}`}
              onClick={() => {
                if (!startTimer) {
                  setCurrType({ info: "pomo", minutes: "25", seconds: "00" });
                } else {
                  toast.dark("Please stop the timer to take the break.");
                }
              }}
            >
              Pomodoro
            </button>
            <button
              className={`type ${currType.info === "short" ? "curr" : ""}`}
              onClick={() => {
                if (!startTimer) {
                  setCurrType({ info: "short", minutes: "05", seconds: "00" });
                } else {
                  toast.dark("Please stop the timer to take the break.");
                }
              }}
            >
              Short Break
            </button>
            <button
              className={`type ${currType.info === "long" ? "curr" : ""}`}
              onClick={() => {
                if (!startTimer) {
                  setCurrType({ info: "long", minutes: "15", seconds: "00" });
                } else {
                  toast.dark("Please stop the timer to take the break.");
                }
              }}
            >
              Long Break
            </button>
          </div>
          <div className="time">
            {currType.minutes}:{currType.seconds}
          </div>
          {showRestart ? (
            <button
              className="start"
              onClick={() => {
                resetTimer();
                setShowRestart(false);
                setShow(false);
                setStartTimer(!startTimer);
              }}
            >
              RESTART
            </button>
          ) : (
            <button
              className="start"
              onClick={() => setStartTimer(!startTimer)}
            >
              {!startTimer ? `START` : `STOP`}
            </button>
          )}

          {startTimer && (
            <div
              className="reset"
              onClick={() => {
                setStartTimer(!startTimer);
                resetTimer();
              }}
            >
              <p>Reset</p>
              <MdRestartAlt />
            </div>
          )}
        </div>
        <p>Please take a short break after completing each pomodoro.</p>
      </div>
    </>
  );
};

export default Pomodoro;
